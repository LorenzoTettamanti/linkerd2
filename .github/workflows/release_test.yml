
name: Release Test

on:
  pull_request:
    # By default, a workflow runs when a pull_request has an event activity of
    # ['opened', 'synchronize','reopened']. We extend default with 'labeled'
    types: [ opened, synchronize, reopened, labeled ]

permissions:
  contents: read

env:
  GH_ANNOTATION: true
  DOCKER_REGISTRY: ghcr.io/linkerd
  K3D_VERSION: v5.4.4

jobs:
  tag:
    if: ${{ contains(github.event.pull_request.labels.*.name, 'release_test') }}
    runs-on: ubuntu-20.04
    steps:
      - uses: actions/checkout@ac593985615ec2ede58e132d2e21d2b1cbd6127c
      - run: echo "::set-output name=tag::$(CI_FORCE_CLEAN=1 bin/root-tag)"
        id: tag
    outputs:
      tag: ${{ steps.tag.outputs.tag }}

  docker_build_amd64:
    if: ${{ contains(github.event.pull_request.labels.*.name, 'release_test') }}
    name: Docker build (amd64)
    needs: [tag]
    runs-on: ubuntu-20.04
    strategy:
      matrix:
        component:
        - cli-bin
        - cni-plugin
        - controller
        - policy-controller
        - debug
        - jaeger-webhook
        - metrics-api
        - proxy
        - tap
        - web
    timeout-minutes: 30
    steps:
    - uses: actions/checkout@ac593985615ec2ede58e132d2e21d2b1cbd6127c
    - name: Set tag
      run: echo 'TAG=${{ needs.tag.outputs.tag }}' >> "$GITHUB_ENV"
    - uses: ./.github/actions/docker-build
      id: build
      with:
        docker-registry: ${{ env.DOCKER_REGISTRY }}
        docker-target: linux\amd64
        docker-ghcr-username: ${{ secrets.DOCKER_GHCR_USERNAME }}
        docker-ghcr-pat: ${{ secrets.DOCKER_GHCR_PAT }}
        component: ${{ matrix.component }}
        tag: ${{ needs.tag.outputs.tag }}
    - name: Run docker save
      run: |
        mkdir -p /home/runner/archives
        docker save '${{ steps.build.outputs.image }}' >'/home/runner/archives/${{ matrix.component }}.tar'
    - uses: actions/upload-artifact@0b7f8abb1508181956e8e162db84b466c27e18ce
      with:
        name: image-archives-amd64
        path: /home/runner/archives
  docker_build_arm64:
    if: ${{ contains(github.event.pull_request.labels.*.name, 'release_test') }}
    name: Docker build (arm64)
    needs: [tag]
    runs-on: ubuntu-20.04
    strategy:
      matrix:
        component:
        - cli-bin
        - cni-plugin
        - controller
        - policy-controller
        - debug
        - jaeger-webhook
        - metrics-api
        - proxy
        - tap
        - web
    timeout-minutes: 30
    steps:
    - uses: actions/checkout@ac593985615ec2ede58e132d2e21d2b1cbd6127c
    - name: Set tag
      run: echo 'TAG=${{ needs.tag.outputs.tag }}' >> "$GITHUB_ENV"
    - uses: ./.github/actions/docker-build
      id: build
      with:
        docker-registry: ${{ env.DOCKER_REGISTRY }}
        docker-target: linux/arm64
        docker-ghcr-username: ${{ secrets.DOCKER_GHCR_USERNAME }}
        docker-ghcr-pat: ${{ secrets.DOCKER_GHCR_PAT }}
        component: ${{ matrix.component }}
        tag: ${{ needs.tag.outputs.tag }}
    - name: Run docker save
      run: |
        mkdir -p /home/runner/archives
        docker save '${{ steps.build.outputs.image }}' >'/home/runner/archives/${{ matrix.component }}.tar'
    - uses: actions/upload-artifact@0b7f8abb1508181956e8e162db84b466c27e18ce
      with:
        name: image-archives-arm64
        path: /home/runner/archives
  test_integration_amd64:
    if: ${{ contains(github.event.pull_request.labels.*.name, 'release_test') }}
    name: Integration tests (amd64)
    needs: [tag, docker_build_amd64]
    continue-on-error: true
    runs-on: ubuntu-20.04
    strategy:
      matrix:
        test:
        - cluster-domain
        - cni-calico-deep
        - deep
        - viz
        - default-policy-deny
        - external
        - rsa-ca
        - helm-upgrade
        - uninstall
        - upgrade-edge
        - upgrade-stable
    timeout-minutes: 15
    steps: 
      - uses: actions/setup-go@6edd4406fa81c3da01a34fa6f6343087c207a568
        with:
          go-version: '1.19'
      - uses: actions/checkout@ac593985615ec2ede58e132d2e21d2b1cbd6127c
      - uses: actions/download-artifact@9bc31d5ccc31df68ecc42ccf4149144866c47d8a
        with:
          name: image-archives
          path: image-archives
      - run: cp image-archives-amd64/linkerd "$HOME" && chmod 755 "$HOME/linkerd"
      - run: find image-archives-amd64 -ls
      - run: bin/tests --images archive --cleanup-docker --name ${{ matrix.test }} "$HOME/linkerd"
        env:
          LINKERD_DOCKER_REGISTRY: ${{ env.DOCKER_REGISTRY }}
          TAG: ${{ needs.tag.outputs.tag }}

  test_integration_arm64:
    if: ${{ contains(github.event.pull_request.labels.*.name, 'release_test') }}
    needs: [tag, docker_build_arm64]
    runs-on: [self-hosted, Linux, ARM64]
    timeout-minutes: 30
    steps:
      - uses: actions/checkout@ac593985615ec2ede58e132d2e21d2b1cbd6127c
      - uses: actions/setup-go@6edd4406fa81c3da01a34fa6f6343087c207a568
        with:
          go-version: '1.19'
      - uses: docker/setup-buildx-action@f03ac48505955848960e80bbb68046aa35c7b9e7
      - uses: actions/download-artifact@9bc31d5ccc31df68ecc42ccf4149144866c47d8a
        with:
          name: image-archives
          path: image-archives
      - run: cp image-archives-arm64/linkerd "$HOME" && chmod 755 "$HOME/linkerd"
      - run: find image-archives-arm64 -ls
      - uses: extractions/setup-just@69d82fb0233557aec017ef13706851d0694e0f1d
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - uses: azure/setup-kubectl@901a10e89ea615cf61f57ac05cecdf23e7de06d8
      - name: Setup k3d
        run: |
          mkdir -p "$PWD/target/bin"
          PATH=$PATH:"$PWD/target/bin"
          echo "PATH=$PATH" >> "$GITHUB_ENV"
          bin/scurl "https://raw.githubusercontent.com/k3d-io/k3d/${{ env.K3D_VERSION }}/install.sh" \
            | USE_SUDO=false K3D_INSTALL_DIR=$PWD/target/bin bash
      - name: Cluster setup
        run: |
         CLUSTER_NAME=$(printf "${{ github.ref_name }}" | tr -c '[:alnum:]' -)
         echo "CLUSTER_NAME=$CLUSTER_NAME" >> "$GITHUB_ENV"
         just k3d-name="$CLUSTER_NAME" k3d-create
         just k3d-name="$CLUSTER_NAME" k3d-use
      - env:
          RUN_ARM_TEST: 1
          LINKERD_DOCKER_REGISTRY: ${{ env.DOCKER_REGISTRY }}
        run: go test ./test/integration/deep/... --integration-tests --linkerd "$CMD"
      - name: Delete cluster
        if: always()
        run: just k3d-name="$CLUSTER_NAME" k3d-delete
